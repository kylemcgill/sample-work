import scipy.stats as stats
import math


def categoryDistribution(true_df, false_df, current_df, col_name, arguments):
    '''
    Prints out the distibution of categorical data for the set of true's
    false's and all data points.

    true_df = the set of machines with HasDetections == 1

    false_df = the set of machines with HasDetections == 0

    current_df = all machines in the data set

    col_name = the name of the x-column for quick access
    
    arguments = the options passed into the program
    '''
    category_list = current_df[col_name].unique()
    if arguments['verbose']:
        print(f'Unique categories for column {col_name}:')
        for cat in category_list:
            print(f'\t{cat}')
    
    true_cat_dist = getDistribution(true_df, category_list, col_name)
    false_cat_dist = getDistribution(false_df, category_list, col_name)
    current_cat_dist = getDistribution(current_df, category_list, col_name)

    # Print out the distributions in a formatted table 
    # TODO: Sort the table in decending order 
    max_str_len = 0
    for cat in category_list:
        if len(str(cat)) > max_str_len:
            max_str_len = len(str(cat))
    if arguments['verbose']:
        print(f'Found max_str_len to be {max_str_len}')

    # Add some padding 
    max_str_len += 3
    
    # Print out the data
    print(f'-'*40)
    print(f'Column name: {col_name}\n')
    header = ['Category','true_df','false_df','current_df']
    print(header[0].ljust(max_str_len), header[1].rjust(10), header[2].rjust(10), header[3].rjust(10))
    print(f'-'*(max_str_len + 30))
    for cat in category_list:
        print(str(cat).ljust(max_str_len), end='')
        print(f'{true_cat_dist[cat]:>10.2%}{false_cat_dist[cat]:>10.2%}{current_cat_dist[cat]:>10.2%}')
    print(f'-'*(max_str_len + 30))

def getDistribution(df, category_list, col_name):
    '''
    Returns a dict with key=category_str and value=percent_value_distribution.
    User supplies the category_list since some may not be present in subset.
    '''
    cat_counts = {k: len(df[df[col_name] == k]) for k in category_list}
    len_df = len(df.index)
    df_cat_dist = {k: (cat_counts[k]/len_df) for k in category_list}
    return df_cat_dist


def chiSquareTest(true_df, false_df, current_df, col_name, arguments):
    '''
    Performs a chi-square test for significance on the column data. Assumes 
    the null hypothesis distibution is the distribution of the current_df, while 
    the true and false subsets are being tested against the null.

    true_df = the set of machines with HasDetections == 1

    false_df = the set of machines with HasDetections == 0

    current_df = all machines in the data set

    col_name = the name of the x-column for quick access
    
    arguments = the options passed into the program
    '''

    # Get the initial distribution data
    category_list = current_df[col_name].unique()
    if arguments['verbose']:
        print(f'Unique categories for column {col_name}:')
        for cat in category_list:
            print(f'\t{cat}')
    
    # Bottom margin of table
    n_total = len(current_df.index)
    n_true = len(true_df.index)
    n_false = len(false_df.index)

    # Total count for each category; aka right margin of table
    n_cat = {k: len(current_df[current_df[col_name] == k]) for k in category_list}

    # Observed frequencies 
    n_cat_each_observed = {k: [len(true_df[true_df[col_name] == k]),
                                len(false_df[false_df[col_name] == k])] 
                                for k in category_list
                          }
    if arguments['verbose']:
        cat_max_str_len = 0
        n = 10
        for cat in category_list: 
            if len(str(cat)) > cat_max_str_len: 
                cat_max_str_len = len(str(cat))
        cat_max_str_len += 3
        print('-'*(cat_max_str_len+30))
        header = ['Category', 'true_df', 'false_df', 'current_df']
        print(header[0].ljust(cat_max_str_len), header[1].rjust(n), header[2].rjust(n), header[3].rjust(n)) 
        for cat in n_cat_each_observed:
            print(str(cat).ljust(cat_max_str_len), 
                    repr(n_cat_each_observed[cat][0]).rjust(n)[:n],
                    repr(n_cat_each_observed[cat][1]).rjust(n)[:n],
                    repr(n_cat[cat]).rjust(n)
                )
    
    # Expected Frequencies
    # %_current_cat_dist * (n_true | n_false); Expect the same dist as current for both true and false
    n_cat_each_expected = {k: [(n_cat[k]/n_total * n_true), 
                                (n_cat[k]/n_total * n_false)] 
                                for k in category_list
                          }
    if arguments['verbose']:
        cat_max_str_len = 0
        n = 10
        for cat in category_list: 
            if len(str(cat)) > cat_max_str_len: 
                cat_max_str_len = len(str(cat))
        cat_max_str_len += 3
        print('-'*(cat_max_str_len+30))
        header = ['Category', 'true_df', 'false_df', 'current_df']
        print(header[0].ljust(cat_max_str_len), header[1].rjust(n), header[2].rjust(n), header[3].rjust(n)) 
        for cat in n_cat_each_observed:
            print(str(cat).ljust(cat_max_str_len), 
                    repr(n_cat_each_expected[cat][0]).ljust(n)[:n],
                    repr(n_cat_each_expected[cat][1]).ljust(n)[:n],
                    repr(n_cat[cat]).rjust(n)
                )
        print('Total'.ljust(cat_max_str_len),
                repr(n_true).rjust(n),
                repr(n_false).rjust(n),
                repr(n_total).rjust(n)
            )


    # Get (observed - expected)^2 / expected
    error_matrix = {k: [(math.pow((n_cat_each_observed[k][0] - n_cat_each_expected[k][0]),2) / n_cat_each_expected[k][0]),
                        (math.pow((n_cat_each_observed[k][1] - n_cat_each_expected[k][1]),2) / n_cat_each_expected[k][1])]
                        for k in category_list
                    }
    if arguments['verbose']:
        cat_max_str_len = 0
        n = 10
        for cat in category_list: 
            if len(str(cat)) > cat_max_str_len: 
                cat_max_str_len = len(str(cat))
        cat_max_str_len += 3
        print('-'*(cat_max_str_len+30))
        header = ['Category', 'true_df', 'false_df', 'current_df']
        print(header[0].ljust(cat_max_str_len), header[1].rjust(n), header[2].rjust(n), header[3].rjust(n)) 
        for cat in n_cat_each_observed:
            print(str(cat).ljust(cat_max_str_len), 
                    repr(error_matrix[cat][0]).ljust(n)[:n],
                    repr(error_matrix[cat][1]).ljust(n)[:n],
                    repr(n_cat[cat]).rjust(n)[:n]
                )

    # Sum the error matrix
    chi_square_stat = 0
    for cat in error_matrix:
        for element in error_matrix[cat]:
            chi_square_stat += element
    
    print(f'Chi-square stat is: {chi_square_stat}')

    # Degrees of freedom for chi-square
    degrees_of_freedom = (len(category_list) -1) *(2 -1)

    p_stat = stats.chi2.cdf(chi_square_stat, degrees_of_freedom)
    print(f'\np-statistic for col {col_name}: {1-p_stat:.4f}')

    # Get the percentile and print ot screen
def categoryPlot(true_df, false_df, current_df):
    pass

