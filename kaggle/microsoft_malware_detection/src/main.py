# Microsoft Malware Detection

import sys, argparse
import os
import csv
import pandas as pd
import numpy as np
import helpers
import const

# Instead of writing our own options parser we just use 'argparse' instead
description_text = '<Description here>'
parser = argparse.ArgumentParser(description=description_text)

# Add command-line args to the parser here
parser.add_argument('-v', '--verbose', help='Print more information', action='store_true')
parser.add_argument('-p', '--plot', help='Show plots of variables', action='store_true')
parser.add_argument('-r', '--pre-process', help='Print the variable discrimination', action='store_true')
parser.add_argument('-t', '--interactive', help='Iterates through all variables and asks user if they \
                    want to use each one', action='store_true')
parser.add_argument('-i', '--in', help='Dir for files to process. DEFAULT is ../in/', action='store',
                     default='../in/', nargs=1)
parser.add_argument('-o', '--out', help='Dir for outputs. DEFAULT is ../out/', action='store',
                     default='../out/', nargs=1)



# Parse the args here
args = parser.parse_args()
args = vars(args) 
print(args)

# Make a const class variable to get all the constants
consts = const.constants()

# Name the raw columns
# Decide what to do with each cols
# helpers.columnDecision('/home/kmcgill/Documents/kaggle/microsoft_malware/in/', outdir, microsoft_dtypes)
helpers.unitTestOneColumn('RtpStateBitfield.csv', consts.microsoft_dtypes, args)


print('done.')
