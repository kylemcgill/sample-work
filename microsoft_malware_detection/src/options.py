'''
This module prints out the help message when 
the user either uses the -help command or
misuses the microsoft_malware package.

OPTIONS: -h --help
'''
keyword_list = (
    'help',
    'interactive',
    'pre-process',
    'plot',
    'verbose',
    'version'
)

char_map = {
    'h':    'help',
    'i':    'interactive',
    'r':    'pre-process',
    'p':    'plot',
    'v':    'verbose'
}


def parseChars(chars):
    '''
    Parses the characters in a character option string.

    chars = The raw string form of the character list

    RETURNS The options to pass into program if any or all are valid. Else 'None' if 
    none of the chars are valid options in the string.
    '''

    return_list = []
    for char in chars:
        if char == '-':
            # Ignore the dash char
            continue
        elif char in char_map:
            # Add the coresponding option to the list
            return_list.append(char_map[char])
        else:
            # Print out error message
            print(f'Char \'{char}\' not in char list')
    
    # If the length is 0 then return None
    if len(return_list) == 0:
        return None
    else:
        return return_list


def parseOption(keyword):
    """
    Returns the parsed keyword if the keyword is valid,
    else None if the keyword is not valid

    keyword = The raw keyword to be parsed

    RETURNS The parsed keyword if the keyword is valid else None if the keyword is not valid.
    """
    parsed_option = keyword[2:]
    print(f'Determining if option is valid: {parsed_option}')
    if parsed_option in keyword_list:
        return parsed_option
    else:
        return None

def printHelp():
    print(f'[OPTION] <file_to_process>')
    for char in char_map:
        char_str = '-' + char
        keyword_str = '--' + char_map[char]
        print(f'\t{char_str:>4}{keyword_str:>15}\t<description_here>')
    print('\n')


def printOptionsList(options_list):
    # Check if we have any options parsed
    if len(options_list) == 0:
        print('No options have been parsed!')
        return 
    else:            
        print(f'-'*40)
        print(f'Running Microsoft Malware with options:')
        for option in options_list:
            print(f'{option:>15}')
        print(f'-'*40)